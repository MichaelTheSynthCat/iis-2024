# Generated by Django 5.1.1 on 2024-10-03 19:20

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Animal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('species', models.CharField(choices=[('Dog', 'Dog'), ('Cat', 'Cat'), ('Rabbit', 'Rabbit'), ('Other', 'Other')], max_length=50)),
                ('age', models.PositiveIntegerField()),
                ('description', models.TextField()),
                ('intake_date', models.DateField()),
                ('is_available', models.BooleanField(default=True)),
                ('health_status', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('Administrator', 'Administrator'), ('Caregiver', 'Caregiver'), ('Veterinarian', 'Veterinarian'), ('Volunteer', 'Volunteer')], max_length=20)),
                ('contact_info', models.TextField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='shelter_user_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='shelter_user_set', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='HealthRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('Checkup', 'Checkup'), ('Vaccination', 'Vaccination')], default='Checkup', max_length=20)),
                ('date', models.DateField()),
                ('notes', models.TextField()),
                ('animal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='health_records', to='shelter.animal')),
                ('veterinarian', models.ForeignKey(limit_choices_to={'role': 'Veterinarian'}, on_delete=django.db.models.deletion.CASCADE, to='shelter.user')),
            ],
        ),
        migrations.CreateModel(
            name='VeterinarianRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_date', models.DateField(auto_now_add=True)),
                ('status', models.CharField(choices=[('Requested', 'Requested'), ('Scheduled', 'Scheduled'), ('Completed', 'Completed')], default='Requested', max_length=20)),
                ('examination_date', models.DateTimeField(blank=True, null=True)),
                ('result', models.TextField(blank=True, null=True)),
                ('animal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vet_requests', to='shelter.animal')),
                ('caregiver', models.ForeignKey(limit_choices_to={'role': 'Caregiver'}, on_delete=django.db.models.deletion.CASCADE, related_name='caregiver_requests', to='shelter.user')),
                ('veterinarian', models.ForeignKey(blank=True, limit_choices_to={'role': 'Veterinarian'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vet_requests', to='shelter.user')),
            ],
        ),
        migrations.CreateModel(
            name='Walk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_time', models.DateTimeField()),
                ('status', models.CharField(choices=[('Reserved', 'Reserved'), ('Approved', 'Approved'), ('Borrowed', 'Borrowed'), ('Returned', 'Returned')], default='Reserved', max_length=20)),
                ('animal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='walks', to='shelter.animal')),
                ('caregiver', models.ForeignKey(limit_choices_to={'role': 'Caregiver'}, on_delete=django.db.models.deletion.CASCADE, related_name='caregiver_walks', to='shelter.user')),
                ('volunteer', models.ForeignKey(blank=True, limit_choices_to={'role': 'Volunteer'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='volunteer_walks', to='shelter.user')),
            ],
        ),
    ]
